syntax = "proto3";

option csharp_namespace = "Protogame.Editor.Grpc.Editor";

service Presence {
  rpc Check(CheckPresenceRequest) returns (CheckPresenceResponse);
}

message CheckPresenceRequest {
}

message CheckPresenceResponse {
}

service Console {
  rpc LogDebug(LogRequest) returns (LogResponse);
  rpc LogInfo(LogRequest) returns (LogResponse);
  rpc LogWarn(LogRequest) returns (LogResponse);
  rpc LogError(LogRequest) returns (LogResponse);
}

message LogRequest {
  string message = 1;
}

message LogResponse {
}

service ProjectManager {
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse);
  rpc GetScannedContentPaths(GetScannedContentPathsRequest) returns (GetScannedContentPathsResponse);
}

message GetProjectRequest {
}

message GetProjectResponse {
  bool hasProject = 1;
  Project project = 2;
}

message GetScannedContentPathsRequest {
  string definitionName = 1;
}

message GetScannedContentPathsResponse {
  repeated string filePath = 1; 
}

message Project {
  string projectPath = 1;
  string loadingStatus = 2;
  string name = 3;
  repeated Package packages = 4;
  repeated Definition definitions = 5;
  string defaultGameDefinitionName = 6;
  string solutionFilePath = 7;
  string defaultGameBinPath = 8;
  int32 hashCode = 9;
}

message Package {
  string repository = 1;
  string package = 2;
  string version = 3;
}

message Definition {
  string name = 1;
  string type = 2;
  string role = 3;
  string xmlDocumentPath = 4;
}

service GameHoster {
  rpc GetBackBufferDimensions(GetBackBufferDimensionsRequest) returns (GetBackBufferDimensionsResponse);
  rpc GetBaseDirectory(GetBaseDirectoryRequest) returns (GetBaseDirectoryResponse);
  rpc PlaybackStateChanged(PlaybackStateChangedRequest) returns (PlaybackStateChangedResponse);
}

message GetBackBufferDimensionsRequest {
}

message GetBackBufferDimensionsResponse {
  int32 width = 1;
  int32 height = 2;
}

message GetBaseDirectoryRequest {
}

message GetBaseDirectoryResponse {
  string baseDirectory = 1;
}

enum PlaybackState {
  Loading = 0;
  Loaded = 1;
  Playing = 2;
  Paused = 3;
}

message PlaybackStateChangedRequest {
  PlaybackState state = 1;
  Timestamp startTime = 2;
}

message PlaybackStateChangedResponse {
}

message Timestamp {
  uint64 unixTimestamp = 1;
}
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Editor.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Protogame.Editor.Grpc.Editor {
  public static partial class Console
  {
    static readonly string __ServiceName = "Console";

    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.LogRequest> __Marshaller_LogRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.LogRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Protogame.Editor.Grpc.Editor.LogResponse> __Marshaller_LogResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Protogame.Editor.Grpc.Editor.LogResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse> __Method_LogDebug = new grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogDebug",
        __Marshaller_LogRequest,
        __Marshaller_LogResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse> __Method_LogInfo = new grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogInfo",
        __Marshaller_LogRequest,
        __Marshaller_LogResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse> __Method_LogWarn = new grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogWarn",
        __Marshaller_LogRequest,
        __Marshaller_LogResponse);

    static readonly grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse> __Method_LogError = new grpc::Method<global::Protogame.Editor.Grpc.Editor.LogRequest, global::Protogame.Editor.Grpc.Editor.LogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogError",
        __Marshaller_LogRequest,
        __Marshaller_LogResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Protogame.Editor.Grpc.Editor.EditorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Console</summary>
    public abstract partial class ConsoleBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.LogResponse> LogDebug(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.LogResponse> LogInfo(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.LogResponse> LogWarn(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Protogame.Editor.Grpc.Editor.LogResponse> LogError(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Console</summary>
    public partial class ConsoleClient : grpc::ClientBase<ConsoleClient>
    {
      /// <summary>Creates a new client for Console</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ConsoleClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Console that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ConsoleClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ConsoleClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ConsoleClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogDebug(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogDebug(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogDebug(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogDebug, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogDebugAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogDebugAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogDebugAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogDebug, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogInfo(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogInfo(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogInfoAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogInfoAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogInfo, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogWarn(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogWarn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogWarn(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogWarn, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogWarnAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogWarnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogWarnAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogWarn, null, options, request);
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogError(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogError(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Protogame.Editor.Grpc.Editor.LogResponse LogError(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogError, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogErrorAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LogErrorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Protogame.Editor.Grpc.Editor.LogResponse> LogErrorAsync(global::Protogame.Editor.Grpc.Editor.LogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogError, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ConsoleClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConsoleClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ConsoleBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_LogDebug, serviceImpl.LogDebug)
          .AddMethod(__Method_LogInfo, serviceImpl.LogInfo)
          .AddMethod(__Method_LogWarn, serviceImpl.LogWarn)
          .AddMethod(__Method_LogError, serviceImpl.LogError).Build();
    }

  }
}
#endregion
